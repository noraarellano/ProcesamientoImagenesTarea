package gui;

import espacial.Convolución;
import herramientas.HerramientasImagen;
import static herramientas.HerramientasImagen.toImage;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *TAREA NORA ARELLANO INTERFAZ GRÁFICA
 * @author norap
 */
public class InterfazConvolucion extends javax.swing.JFrame {
    private BufferedImage imagenOriginal;
    private JLabel labelImagenOriginal;
    private JLabel labelImagenModificada;
    private JTextField[] matrizTextFields;
    private JButton aplicarConvolucionButton;
    private Convolución convolucion;

    /**
     * Creates new form InterfazConvolucion
     */
    public InterfazConvolucion(BufferedImage imagenOriginal) {
        this.imagenOriginal = imagenOriginal;
        this.convolucion = new Convolución(imagenOriginal);

        setTitle("Interfaz de Convolución");
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    setLayout(new BorderLayout());

    // Inicialización de componentes directamente en el constructor
    labelImagenOriginal = new JLabel(new ImageIcon(imagenOriginal));
    labelImagenModificada = new JLabel();

    matrizTextFields = new JTextField[9];
    for (int i = 0; i < 9; i++) {
        matrizTextFields[i] = new JTextField("1");
    }

    aplicarConvolucionButton = new JButton("Aplicar Convolución");
    aplicarConvolucionButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            aplicarConvolucion();
        }
    });
        setupUI();

        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    
    
    private void setupUI() {
        JPanel panelSuperior = new JPanel();
        panelSuperior.add(new JLabel("Matriz de Convolución:"));
        for (int i = 0; i < 9; i++) {
            panelSuperior.add(matrizTextFields[i]);
        }
        panelSuperior.add(aplicarConvolucionButton);

        JPanel panelImagenes = new JPanel();
        panelImagenes.add(labelImagenOriginal);
        panelImagenes.add(labelImagenModificada);

        add(panelSuperior, BorderLayout.NORTH);
        add(panelImagenes, BorderLayout.CENTER);
    }
    
    

    
    private void aplicarConvolucion() {
        int[] mascara = new int[9];
        for (int i = 0; i < 9; i++) {
            mascara[i] = Integer.parseInt(matrizTextFields[i].getText());
        }

        // Puedes ajustar el divisor según tu lógica
        int divisor = 1;

        Image imagenModificada = convolucion.convolucionar(mascara, divisor);
        labelImagenModificada.setIcon(new ImageIcon(imagenModificada));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // </editor-fold>
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
     public static void main(String args[]) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                // Cargar tu imagen aquí
                BufferedImage imagenOriginal = cargarImagen();

                new InterfazConvolucion(imagenOriginal);
            }
        });
    }
    
    private static BufferedImage cargarImagen() {
        try {
            // definir los filtros para lectura
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Imagenes", "jpg", "jpeg", "png", "bmp");
            
            // crear un selector de archivos
            JFileChooser selector = new JFileChooser();
            
            // agregar el filtro al selector
            selector.addChoosableFileFilter(filtro);
            
            // especificar que solo se puedan abrir archivos
            selector.setFileSelectionMode(JFileChooser.FILES_ONLY);
            
            // ejecutar el selector de imágenes
            int res = selector.showOpenDialog(null);
            
            if (res == JFileChooser.APPROVE_OPTION) {
                File archivo = selector.getSelectedFile();
                return ImageIO.read(archivo);
            } else {
                return null;
            }
        } catch (IOException ex) {
            Logger.getLogger(InterfazConvolucion.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
